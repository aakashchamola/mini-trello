version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mini-trello-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mini_trello
      MYSQL_USER: trello_user
      MYSQL_PASSWORD: trello_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - mini-trello-network
    command: --default-authentication-plugin=mysql_native_password

  # Backend API (Development)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: mini-trello-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: mini_trello
      DB_USER: trello_user
      DB_PASSWORD: trello_password
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    networks:
      - mini-trello-network
    depends_on:
      - mysql
      - redis
    command: npm run dev

  # Frontend React App (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: mini-trello-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_SOCKET_URL: http://localhost:5000
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - mini-trello-network
    depends_on:
      - backend
    command: npm start

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  mini-trello-network:
    driver: bridge
